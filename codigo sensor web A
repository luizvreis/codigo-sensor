#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// Configuração do ponto de acesso
const char *ssid = "PedalPro";          // Nome da rede Wi-Fi criada pelo ESP8266
const char *password = "PedalPro123";   // Senha da rede Wi-Fi (mínimo 8 caracteres)

// Configurações do sensor
const int hallPin = D4;  // Pino do sensor de efeito Hall (D4 no ESP8266)
const float diametroPneu = 0.7;  // Diâmetro do pneu em metros
const float pi = 3.1416;  // Valor de pi para o cálculo da circunferência

// Variáveis para medição de velocidade e distância
unsigned long tempoUltimaVolta = 0;  // Tempo da última volta
unsigned long tempoEntreVoltas = 0;  // Tempo entre as voltas
unsigned long tempoTotal = 0;  // Tempo total acumulado
int contadorVoltas = 0;  // Contador de voltas
float distanciaTotal = 0.0;  // Distância total percorrida
float velocidadeInstantanea = 0.0;  // Velocidade instantânea
float velocidadeMedia = 0.0;  // Velocidade média

// Intervalo para cálculo da velocidade média
const int intervaloMedia = 5000;  // Intervalo de 5 segundos
unsigned long ultimoCalculoMedia = 0;  // Último cálculo da velocidade média
float distanciaParcial = 0.0;  // Distância percorrida no intervalo
unsigned long tempoParcial = 0;  // Tempo decorrido no intervalo

// Servidor web na porta 80
ESP8266WebServer server(80);

void setup() {
  Serial.begin(115200);

  // Configura o ESP8266 como ponto de acesso
  WiFi.softAP(ssid, password);
  Serial.println("Ponto de acesso criado");

  // Exibe o endereço IP do ponto de acesso
  IPAddress IP = WiFi.softAPIP();
  Serial.print("Endereço IP do AP: ");
  Serial.println(IP);

  // Configura o servidor web
  server.on("/", paginaInicial);
  server.begin();

  // Configura o pino do sensor
  pinMode(hallPin, INPUT);
}

void loop() {
  // Verifica se o sensor de efeito Hall foi ativado (detecção do ímã)
  if (digitalRead(hallPin) == LOW) {
    unsigned long tempoAgora = millis();

    // Debounce: verifica se passou tempo suficiente desde a última detecção
    if (tempoAgora - tempoUltimaVolta > 100) {
      if (tempoUltimaVolta > 0) {
        tempoEntreVoltas = tempoAgora - tempoUltimaVolta;

        // Calcula a distância percorrida para a volta
        float circunferencia = pi * diametroPneu;
        distanciaTotal += circunferencia;
        distanciaParcial += circunferencia;  // Acumula a distância no intervalo

        // Acumula o tempo total e o tempo parcial
        tempoTotal += tempoEntreVoltas;
        tempoParcial += tempoEntreVoltas;

        // Calcula a velocidade instantânea
        if (tempoEntreVoltas > 0) {
          velocidadeInstantanea = (circunferencia / (tempoEntreVoltas / 1000.0)) * 3.6;
        }

        // Calcula a velocidade média no intervalo de tempo
        if (tempoAgora - ultimoCalculoMedia >= intervaloMedia) {
          if (tempoParcial > 0) {
            velocidadeMedia = (distanciaParcial / (tempoParcial / 1000.0)) * 3.6;
          }

          // Reinicia as variáveis para o próximo intervalo
          distanciaParcial = 0.0;
          tempoParcial = 0;
          ultimoCalculoMedia = tempoAgora;
        }

        contadorVoltas++;
      }

      // Atualiza o tempo da última volta
      tempoUltimaVolta = tempoAgora;
    }
  }

  // Processa as requisições do servidor web
  server.handleClient();
}

void paginaInicial() {
  // Cria a mensagem HTML
  String htmlMessage = "<!DOCTYPE html>"
                       "<html>"
                       "<head>"
                       "<meta http-equiv=\"refresh\" content=\"1\">"  // Atualiza a página a cada 1 segundo
                       "<title>PedalPro - Computador de Bordo</title>"
                       "</head>"
                       "<body>"
                       "<h1>Voltas: " + String(contadorVoltas) + "</h1>"
                       "<h2>Velocidade Instantânea: " + String(velocidadeInstantanea, 2) + " km/h</h2>"
                       "<h3>Velocidade Média: " + String(velocidadeMedia, 2) + " km/h</h3>"
                       "</body>"
                       "</html>";

  // Envia a resposta ao cliente
  server.send(200, "text/html", htmlMessage);
}
